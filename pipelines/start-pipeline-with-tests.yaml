# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
 

trigger:
- none

pool:
  name: 'Host Pool - Windows'

variables:
  azureServiceConnection: 'Azure DevOps'
  location: 'westeurope'
  resourceGroupName: 'debont-test-rg'
  storageAccountName: 'subariosstorage12345'
  templateFile: './learning/Tutorial1.bicep'

stages: 
- stage: 'pre_test'
  displayName: 'Pre-deployment Tests'
  jobs: 
  - job: PreDeploymentTests
    displayName:  'Pre-deployment Tests'
    steps:
      - checkout: self
        persistCredentials: 'true'

      - task: AzurePowerShell@5
        inputs:        
          azureSubscription: $(azureServiceConnection)
          ScriptType: "Inlinescript"
          Inline: |
            Set-Location ./post-tests
            Invoke-Pester -CI -Output Detailed --ResultsPath $(System.DefaultWorkingDirectory)\Publish -Publish
          pwsh: 'true'
          azurePowershellVersion: 'LatestVersion'
          errorActionPreference: 'continue'

      - task: PublishTestResults@2
        inputs:
          # Make sure to use the 'NUnit' test runner
          testRunner: "NUnit" # !!!
          # Make sure the file name matches the file name you specified in the Invoke-Pester.ps1 script.
          # A possibility is to add this as a parameter to the script
          testResultsFiles: "**/TestResults.Pester.xml"
          testRunTitle: "saCreateion_Unit"
          # Make the whole pipeline fail if a test is failed
          failTaskOnFailedTests: true
        displayName: "Publish Unit Test Results"
        condition: in(variables['Agent.JobStatus'], 'Succeeded', 'SucceededWithIssues', 'Failed')

      - task: PublishCodeCoverageResults@1
        inputs:
          summaryFileLocation: "**/CodeCoverage.xml"
          failIfCoverageEmpty: false
        displayName: "Publish Unit Test Code Coverage"
        condition: and(in(variables['Agent.JobStatus'], 'Succeeded', 'SucceededWithIssues', 'Failed'), eq(variables['System.PullRequest.IsFork'], false))

- stage: DeployStorageAccount
  displayName: 'Deploy Storage Account'
  jobs:
  - job: DeployStorageAccount
    steps:
    - task: AzureResourceManagerTemplateDeployment@3 # more info: https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/reference/azure-resource-manager-template-deployment-v3?view=azure-pipelines
      displayName: 'Tutorial 1'
      inputs:
          deploymentScope: 'Resource Group'
          azureResourceManagerConnection: '$(azureServiceConnection)'
          action: 'Create Or Update Resource Group'
          resourceGroupName: '$(resourcegroupName)'
          location: '$(location)'
          templateLocation: 'Linked artifact'
          csmFile: '$(templateFile)'
          overrideParameters: ''
          deploymentMode: 'Incremental'
          deploymentName: 'Tutorial1'

#- stage: 'post_test'
#  displayName: 'Post-deployment Tests'
#  jobs: 
#  - job: PostDeploymentTests
#    displayName:  'Post-deployment Tests'
#    steps:
#    - task: AzurePowerShell@5
#      displayName: "Run Post-deployement tests"
#      inputs:
#        azureSubscription: $(azureServiceConnection)
#        ScriptType: "Inlinescript"
#        Inline: |
#           Set-Location ./post-tests
#           Invoke-Pester -CI -Output Detailed
#        pwsh: 'true'   
#        azurePowershellVersion: 'LatestVersion'


#    - task: PublishTestResults@2
#      inputs:
#          testResultsFormat: "NUnit"
#          testResultsFiles: "**/Test*.xml"
#          failTaskOnFailedTests: true
#          testRunTitle: "Validate Task Files"
